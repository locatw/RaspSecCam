require 'rake/clean'
require 'fileutils'

class BuildSystem
  TARGET = "rasp_sec_cam_server"

  SRC_EXT = '.cpp'
  OBJ_EXT = '.o'
  DEP_EXT = '.mf'

  def initialize
    CLEAN.include(build_root)
  end

  def setup_build_directory
    Dir.glob("#{src_root}/**/").each do |src_dir|
      [obj_root, dep_root, bin_root].each do |root|
        dir = change_root(src_dir, src_root, root)
        FileUtils.mkdir_p(dir) unless Dir.exist?(dir)
      end
    end
  end

  def build
    invoke_task(:setup)
    invoke_task(TARGET)
  end

  def collect_dependencies(objfile)
    depfile = dep_path(objfile)
  
    Rake::FileTask[depfile].invoke
  
    obj, deps = load_depfile(depfile)
    objfile.include?(obj) ? deps : []
  end

  private

  def invoke_task(task)
    Rake::Task[task].invoke
  end

  def load_depfile(depfile)
    lines = []
    File.open(depfile).each_line do |line|
      lines << line.gsub(/\\\n$/, "")
      next if line.end_with?("\\")
    end
  
    obj, deps = lines.join(" ").split(':', 2)
    deps = deps.split(' ').map{|s| s.strip}
    return obj, deps
  end

  def dep_path(file)
    convert_path(file, :depend)
  end

  def change_root(path, from, to)
    path.gsub(Regexp.new("\\A" + from), to)
  end
  
  def convert_path(file, to)
    ext = File.extname(file)
    root_dir =
      case ext
      when SRC_EXT then src_root 
      when OBJ_EXT then obj_root
      when DEP_EXT then dep_root
      end
    new_root, new_ext =
      case to
      when :source then [src_root, SRC_EXT]
      when :object then [obj_root, OBJ_EXT]
      when :depend then [dep_root, DEP_EXT]
      end
    change_root(file, root_dir, new_root).gsub(Regexp.new("\\#{ext}$"), new_ext)
  end

  def build_root
    "./build"
  end

  def obj_root
    build_root + "/objs"
  end

  def dep_root
    build_root + "/deps"
  end

  def bin_root
    build_root + "/bin"
  end

  def src_root
    "source"
  end
end

build_system = BuildSystem.new

### directories ###
BUILD_ROOT = "./build"
SRC_ROOT = "source"
OBJ_ROOT = BUILD_ROOT + "/objs"
DEP_ROOT = BUILD_ROOT + "/deps"
BIN_ROOT = BUILD_ROOT + "/bin"

### file extensions ###
SRC_EXT = '.cpp'
OBJ_EXT = '.o'
DEP_EXT = '.mf'

### constants ###
PRODUCT = "RaspSecCam"
TARGET = "rasp_sec_cam_server"

COMPILER = "#{ENV['HOME']}/raspi-dev/opt/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-linux-gnueabihf-g++"
CXX_FLAGS = ["-std=c++11"]
INC_DIRS = ["#{ENV['HOME']}/raspi-dev/opt/rootfs/usr/local/include/"]
EXT_LIB_DIRS = ["#{ENV['HOME']}/raspi-dev/opt/rootfs/usr/local/lib/raspicam/",
                "#{ENV['HOME']}/raspi-dev/opt/userland/build/lib/"]
LIB_DIRS = EXT_LIB_DIRS

SRCS = FileList["#{SRC_ROOT}/**/*#{SRC_EXT}"]
EXT_LIBS = ["raspicam", "mmal", "mmal_core", "mmal_util", "mmal_vc_client", "vcos", "vchiq_arm"]
LIBS = EXT_LIBS

### methods ###
def CXX_FLAGS.to_option_s
  self.join(' ')
end

def INC_DIRS.to_option_s
  self.map{|dir| "-I#{dir}"}.join(" ")
end

def LIB_DIRS.to_option_s
  self.map{|dir| "-L#{dir}"}.join(" ")
end

def LIBS.to_option_s
  self.map{|lib| "-l#{lib}"}.join(" ")
end

def change_root(path, from, to)
  path.gsub(Regexp.new("\\A" + from), to)
end

def convert_path(file, to)
  ext = File.extname(file)
  root_dir =
    case ext
    when SRC_EXT then SRC_ROOT
    when OBJ_EXT then OBJ_ROOT
    when DEP_EXT then DEP_ROOT
    end
  new_root, new_ext =
    case to
    when :source then [SRC_ROOT, SRC_EXT]
    when :object then [OBJ_ROOT, OBJ_EXT]
    when :depend then [DEP_ROOT, DEP_EXT]
    end
  change_root(file, root_dir, new_root).gsub(Regexp.new("\\#{ext}$"), new_ext)
end

def src_path(file)
  convert_path(file, :source)
end

def obj_path(file)
  convert_path(file, :object)
end

def dep_path(file)
  convert_path(file, :depend)
end

def remove_file(filename)
  rm_r filename if File.exist?(filename)
end

def make_raspi_url()
  user = ENV["RASPI_USER"]
  host = ENV["RASPI_HOST"]

  return "#{user}@#{host}"
end

def make_exe_path()
  return "#{BIN_ROOT}/#{TARGET}"
end

### tasks ###
task :default => :build

desc "Setup build directories"
task :setup do
  build_system.setup_build_directory
end

desc "Build executable"
task :build do |t|
  build_system.build
end

desc "Rebuild executable"
task :rebuild do |t|
  task(:clobber).invoke
  task(:build).invoke
end

desc "Deploy executables to raspberry pi"
task :deploy => :build do |t|
  raspi_path = make_raspi_url
  src_path = make_exe_path
  dest_path = "#{raspi_path}:~/dev/#{PRODUCT}/"
  sh "rsync #{src_path} #{dest_path}"
end

CLOBBER.include(TARGET)

### file tasks ###
OBJS = FileList[SRCS.map{|src| obj_path(src)}]

file TARGET => OBJS do |f|
  exe = make_exe_path
  sh "#{COMPILER} #{LIB_DIRS.to_option_s} -o #{exe} #{LIBS.to_option_s} #{f.prerequisites.join(' ')}"
end

### rules ###
rule '.o' => [proc{|objfile| build_system.collect_dependencies(objfile)}] do |r|
  objfile = r.name
  srcfile = src_path(objfile)
  sh "#{COMPILER} #{CXX_FLAGS.to_option_s} #{INC_DIRS.to_option_s} -o #{objfile} -c #{srcfile}"
end

rule DEP_EXT do |r|
  srcfile = src_path(r.name)
  depfile = dep_path(srcfile)
  objfile = obj_path(srcfile)
  sh "#{COMPILER} #{CXX_FLAGS.to_option_s} #{INC_DIRS.to_option_s} -MM -MT #{objfile} #{srcfile} -MF #{depfile}"
end
