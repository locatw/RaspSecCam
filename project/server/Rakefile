require 'fileutils'

class CppCompiler
  include FileUtils

  def initialize(compiler_bin)
    @compiler = compiler_bin
    @cpp_flags = []
    @inc_dirs = []
    @lib_dirs = []
    @libs = []
  end

  def make_target(dependent_objfiles, exefile)
    objs = dependent_objfiles.join(' ')
    sh "#{@compiler} #{lib_dir_options} -o #{exefile} #{lib_options} #{objs}"
  end
  
  def make_object_file(srcfile, objfile)
    sh "#{@compiler} #{cpp_flag_options} #{inc_dirs_options} -o #{objfile} -c #{srcfile}"
  end

  def make_dependency_file(srcfile, objfile, outputfile)
    sh "#{@compiler} #{cpp_flag_options} #{inc_dirs_options} -MM -MT #{objfile} #{srcfile} -MF #{outputfile}"
  end

  def add_cpp_flag(flag)
    @cpp_flags << flag
  end

  def add_include_dir(dir)
    @inc_dirs << dir
  end

  def add_library_dir(dir)
    @lib_dirs << dir
  end

  def add_library(library)
    @libs << library
  end

  private

  def cpp_flag_options
    @cpp_flags.join(' ')
  end

  def inc_dirs_options
    @inc_dirs.map{|dir| "-I#{dir}"}.join(" ")
  end

  def lib_dir_options
    @lib_dirs.map{|dir| "-L#{dir}"}.join(" ")
  end

  def lib_options
    @libs.map{|lib| "-l#{lib}"}.join(" ")
  end
end

class BuildSystem
  PRODUCT = "RaspSecCam"
  TARGET = "rasp_sec_cam_server"
  COMPILER = "#{ENV['HOME']}/raspi-dev/opt/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-linux-gnueabihf-g++"

  CXX_FLAGS = ["-std=c++11"]
  INC_DIRS = ["#{ENV['HOME']}/raspi-dev/opt/rootfs/usr/local/include/"]
  EXT_LIB_DIRS = ["#{ENV['HOME']}/raspi-dev/opt/rootfs/usr/local/lib/raspicam/",
                  "#{ENV['HOME']}/raspi-dev/opt/userland/build/lib/"]
  LIB_DIRS = EXT_LIB_DIRS
  EXT_LIBS = ["raspicam", "mmal", "mmal_core", "mmal_util", "mmal_vc_client", "vcos", "vchiq_arm"]
  LIBS = EXT_LIBS
  
  SRC_EXT = '.cpp'
  OBJ_EXT = '.o'
  DEP_EXT = '.mf'

  include Rake::DSL

  def initialize
    @src_files = FileList[]
  end

  def retrieve_source_files
    @src_files = FileList["#{src_root}/**/*#{SRC_EXT}"]
  end

  def setup_build_directory
    Dir.glob("#{src_root}/**/").each do |src_dir|
      [obj_root, dep_root, bin_root].each do |root|
        dir = change_root(src_dir, src_root, root)
        FileUtils.mkdir_p(dir) unless Dir.exist?(dir)
      end
    end
  end

  def build
    @compiler = CppCompiler.new COMPILER
    CXX_FLAGS.each do |flag|
      @compiler.add_cpp_flag(flag)
    end
    INC_DIRS.each do |dir|
      @compiler.add_include_dir(dir)
    end
    LIB_DIRS.each do |dir|
      @compiler.add_library_dir(dir)
    end
    LIBS.each do |lib|
      @compiler.add_library(lib)
    end

    retrieve_source_files

    define_target_file_task
    define_object_file_task
    define_dep_file_task

    task :setup do
      setup_build_directory
    end

    invoke_task(:setup)
    invoke_task(TARGET)
  end

  def rebuild
    clobber
    invoke_task(:build)
  end

  def clean
    remove_file(obj_root)
    remove_file(dep_root)
  end

  def clobber
    clean
    remove_file(build_root)
  end

  def get_dependent_objfiles
    FileList[@src_files.map{|src| obj_path(src)}]
  end

  def make_target(dependent_objfiles)
    @compiler.make_target(dependent_objfiles, exe_path)
  end

  def make_object_file(objfile)
    srcfile = src_path(objfile)
    @compiler.make_object_file(srcfile, objfile)
  end

  def make_dependency_file(depfilename)
    srcfile = src_path(depfilename)
    depfile = dep_path(srcfile)
    objfile = obj_path(srcfile)
    @compiler.make_dependency_file(srcfile, objfile, depfile)
  end

  def collect_dependencies(objfile)
    depfile = dep_path(objfile)
  
    invoke_file_task(depfile)
  
    obj, deps = load_depfile(depfile)
    objfile.include?(obj) ? deps : []
  end

  def make_raspi_url()
    user = ENV["RASPI_USER"]
    host = ENV["RASPI_HOST"]
  
    return "#{user}@#{host}"
  end

  def exe_path()
    return "#{bin_root}/#{TARGET}"
  end

  private

  def define_target_file_task
    file TARGET => [get_dependent_objfiles].flatten do |f|
      make_target(f.prerequisites)
    end
  end

  def define_object_file_task
    rule OBJ_EXT => [proc{|objfile| collect_dependencies(objfile)}] do |r|
      make_object_file(r.name)
    end
  end

  def define_dep_file_task
    rule DEP_EXT do |r|
      make_dependency_file(r.name)
    end
  end

  def invoke_task(task)
    Rake::Task[task].invoke
  end

  def invoke_file_task(filename)
    Rake::FileTask[filename].invoke
  end

  def load_depfile(depfile)
    lines = []
    File.open(depfile).each_line do |line|
      lines << line.gsub(/\\\n$/, "")
      next if line.end_with?("\\")
    end
  
    obj, deps = lines.join(" ").split(':', 2)
    deps = deps.split(' ').map{|s| s.strip}
    return obj, deps
  end

  def src_path(file)
    convert_path(file, :source)
  end
  
  def obj_path(file)
    convert_path(file, :object)
  end

  def dep_path(file)
    convert_path(file, :depend)
  end

  def change_root(path, from, to)
    path.gsub(Regexp.new("\\A" + from), to)
  end
  
  def convert_path(file, to)
    ext = File.extname(file)
    root_dir =
      case ext
      when SRC_EXT then src_root 
      when OBJ_EXT then obj_root
      when DEP_EXT then dep_root
      end
    new_root, new_ext =
      case to
      when :source then [src_root, SRC_EXT]
      when :object then [obj_root, OBJ_EXT]
      when :depend then [dep_root, DEP_EXT]
      end
    change_root(file, root_dir, new_root).gsub(Regexp.new("\\#{ext}$"), new_ext)
  end

  def build_root
    "./build"
  end

  def obj_root
    build_root + "/objs"
  end

  def dep_root
    build_root + "/deps"
  end

  def bin_root
    build_root + "/bin"
  end

  def src_root
    "source"
  end

  def remove_file(filename)
    rm_r filename if File.exists?(filename)
  end
end

### tasks ###
task :default => :build

desc "Build executable"
task :build do |t|
  build_system = BuildSystem.new
  build_system.build
end

desc "Rebuild executable"
task :rebuild do |t|
  build_system = BuildSystem.new
  build_system.rebuild
end

desc "Remove any temporary products"
task :clean do |t|
  build_system = BuildSystem.new
  build_system.clean
end

desc "Remove any generated file"
task :clobber do |t|
  build_system = BuildSystem.new
  build_system.clobber
end

desc "Deploy executables to raspberry pi"
task :deploy => :build do |t|
  raspi_path = build_system.make_raspi_url
  src_path = build_system.exe_path
  dest_path = "#{raspi_path}:~/dev/#{BuildSystem::PRODUCT}/"
  sh "rsync #{src_path} #{dest_path}"
end
